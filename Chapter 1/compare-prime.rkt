#lang sicp
(define (prime? n)
  (= (smallest-divisor n) n))
(define (smallest-divisor n)
  (find-divisor-iter n 2))
(define (find-divisor-iter n divisor)
  (cond ((> (square divisor) n) n)
        ((divides? divisor n) divisor)
        (else (find-divisor-iter n (inc divisor)))))
(define (square x)
  (* x x))
(define (divides? divisor n)
  (= 0 (remainder n divisor)))

(define (timed-prime-test n)
  (start-prime-test n (runtime)))

(define (start-prime-test n start-time)
  (if (prime? n)
      (- (runtime) start-time)
      -1))
(define (search-for-prime n)
  (if (= -1 (timed-prime-test n))
      (search-for-prime (+ 1 n))
      (timed-prime-test n)))

(define (coefficient-at-power p)
  (/ (* 1.0 (search-for-prime (expt 10 (inc p))))
     (* 1.0 (search-for-prime (expt 10 p)))))
(define (compare-info p)
  (display "compare at 10e")
  (display p)
  (display " |")
  (display (coefficient-at-power p))
  (display " - ")
  (display (sqrt 10))
  (display "| = ")
  (display (abs (- (coefficient-at-power p) (sqrt 10)))))
(compare-info 10)
