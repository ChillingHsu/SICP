;ex3.19
(define (loop? lst)
  (define (step-forward step elt)
    (cond ((null? elt) '())
          ((= 0 step) elt)
          (else (step-forward (- step 1) (cdr elt)))))
  (define (walk slower faster)
    (let ((s (step-forward 1 slower))
          (f (step-forward 2 faster)))
      (if (and (not (null? s))
               (not (null? f)))
          (if (eq? s f)
              #t
              (walk s f))
          #f)))
  (walk lst lst))
(define v (list 1 2 3 4 5))
(loop? v)
(define (make-cycle x)
  (set-cdr! (last-pair x) x)
  x)
(define cv (make-cycle v))
(loop? cv)
