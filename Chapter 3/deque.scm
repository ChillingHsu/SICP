;ex3.22
(define (make-deque)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (set-front-ptr! item)
      (set! front-ptr item))
    (define (set-rear-ptr! item)
      (set! rear-ptr item))
    (define (empty-deque?)
      (null? front-ptr))
    (define (front-deque)
      (if (empty-deque?)
        (error "FRONT-deque called with an empty deque" front-ptr)
        (car front-ptr)))
    (define (rear-deque)
      (if (empty-deque?)
        (error "REAR-DEQUE called with an empty deque" rear-ptr)
        (car rear-ptr)))
    (define (set-empty!)
      (set! front-ptr '())
      (set! rear-ptr '()))
    (define (rear-insert-deque! item)
      (let ((new-pair (cons item (cons '() '()))))
        (cond ((empty-deque?)
               (set-front-ptr! new-pair)
               (set-rear-ptr! new-pair))
              (else
               (set-car! (cdr new-pair) rear-ptr)
               (set-cdr! (cdr rear-ptr) new-pair)
               (set-rear-ptr! new-pair)))
        'inserted))
    (define (front-insert-deque! item)
      (let ((new-pair (cons item (cons '() '()))))
        (cond ((empty-deque?)
               (set-front-ptr! new-pair)
               (set-rear-ptr! new-pair))
              (else
               (set-cdr! (cdr new-pair) front-ptr)
               (set-car! (cdr front-ptr) new-pair)
               (set-front-ptr! new-pair)))
        'inserted))
    (define (front-delete-deque!)
      (define deleted '())
      (cond ((empty-deque?)
             (error "FRONT-DELETE! called with an empty deque" deque))
            (else
             (set! deleted (car front-ptr))
             (if (null? (cddr front-ptr))
                 (set-empty!)
                 (begin (set-front-ptr! (cddr front-ptr))
                        (set-car! (cdr front-ptr) '())))))
      deleted)
    (define (rear-delete-deque!)
      (define deleted '())
      (cond ((empty-deque?)
             (error "REAR-DELETE! called with an empty deque" deque))
            (else
             (set! deleted (car rear-ptr))
             (if (null? (cadr rear-ptr))
                 (set-empty!)
                 (begin (set-rear-ptr! (cadr rear-ptr))
                        (set-cdr! (cdr rear-ptr) '())))))
      deleted)
    (define (to-list)
      (define (iter current)
        (if (null? current)
          '()
          (cons (car current) (iter (cddr current)))))
      (iter front-ptr))
    (define (dispatch m)
      (cond ((eq? m 'empty-deque?) empty-deque?)
            ((eq? m 'front-deque) front-deque)
            ((eq? m 'front-delete-deque!) front-delete-deque!)
            ((eq? m 'rear-delete-deque!) rear-delete-deque!)
            ((eq? m 'front-insert-deque!) front-insert-deque!)
            ((eq? m 'rear-insert-deque!) rear-insert-deque!)
            ((eq? m 'front-ptr) front-ptr)
            ((eq? m 'rear-ptr) rear-ptr)
            ((eq? m 'to-list) to-list)
            (else (error "Undefined operation -- DISPATCH" m))))
    dispatch))

(define (front-ptr deque) (deque 'front-ptr))
(define (rear-ptr deque) (deque 'rear-ptr))
(define (set-front-ptr! deque item) ((deque 'set-front-ptr!) item))
(define (set-rear-ptr! deque item) ((deque 'set-rear-ptr!) item))
(define (empty-deque? deque) ((deque 'empty-deque?)))
(define (front-deque deque) ((deque 'front-deque)))
(define (front-insert-deque! deque item) ((deque 'front-insert-deque!) item))
(define (rear-insert-deque! deque item) ((deque 'rear-insert-deque!) item))
(define (front-delete-deque! deque) ((deque 'front-delete-deque!)))
(define (rear-delete-deque! deque) ((deque 'rear-delete-deque!)))
(define (to-list deque) ((deque 'to-list)))
(define q (make-deque))
(empty-deque? q)
(front-insert-deque! q 'a)
(rear-insert-deque! q 'd)
(front-insert-deque! q 'c)
(to-list q)

(rear-delete-deque! q)
(rear-delete-deque! q)
(front-delete-deque! q)

(to-list q)
