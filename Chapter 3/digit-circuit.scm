(define (half-adder a b s c)
  (let ((d (make-wire))
        (e (make-wire)))
    (or-gate a b d)
    (and-gate a b c)
    (inverter c e)
    (and-gate d e s)
    'ok))
(define (full-adder a b c-in sum c-out)
  (let ((s (make-wire))
        (c1 (make-wire))
        (c2 (make-wire)))
    (half-adder b c-in s c1)
    (half-adder a s sum c2)
    (or-gate c1 c2 c-out)
    'ok))
(define (inverter input output)
  (define (inverter-input)
    (let ((new-value (logical-not (get-signal input))))
      (after-delay inverter-delay
                   (lambda ()
                     (set-signal! output new-value)))))
  (add-action! input inverter)
  'ok)
(define (logical-not s)
  (cond ((= s 0) 1)
        ((= s 1) 0)
        (else (error "Invalid signal -- LOGICAL-NOT" s))))
(define (and-gate a1 a2 output)
  (define (and-action-procedures)
    (let ((new-value
           (logical-and (get-signal a1) (get-signal a2))))
      (after-delay and-gate-delay
                   (lambda ()
                     (set-signal! output new-value)))))
  (add-action! a1 and-action-procedures)
  (add-action! a2 and-action-procedures)
  'ok)
(define (logical-and a1 a2)
  (cond ((and (= a1 1) (= a2 1)) 1)
        ((and (= a1 0) (= a2 1)) 0)
        ((and (= a1 1) (= a2 0)) 0)
        ((and (= a1 0) (= a2 0)) 0)
        (else (error "Invalid signal -- LOGICAL-AND" a1 a2))))
;ex3.28
(define (or-gate o1 o2 output)
  (define (or-action-procedures)
    (let ((new-value
           (logical-or (get-signal o1) (get-signal o2))))
      (after-delay or-gate-delay
                   (lambda ()
                     (set-signal! output new-value)))))
  (add-action! o1 or-action-procedures)
  (add-action! o2 or-action-procedures)
  'ok)
(define (logical-or a1 a2)
  (cond ((and (= a1 1) (= a2 1)) 1)
        ((and (= a1 0) (= a2 1)) 1)
        ((and (= a1 1) (= a2 0)) 1)
        ((and (= a1 0) (= a2 0)) 0)
        (else (error "Invalid signal -- LOGICAL-OR" a1 a2))))
;ex3.29
(define (or-gate o1 o2 output)
  (let ((io1 (make-wire))
        (io2 (make-wire))
        (io (make-wire)))
    (inverter o1 io1)
    (inverter o2 io2)
    (and-gate io1 io2 io)
    (inverter io output)
    'ok))
;两个输入信号会被同时地取反，所以这两个反门只会占用一个inverter-delay
;or-gate-dely = 2 * inverter-delay + and-gate-delay

;ex3.30
(define (ripple-carry-adder list-A list-B list-S C)
  (if (= (length list-A)
         (length list-B)
         (length list-S))
      (if (= (length list-A) 1)
          (let ((Cn (make-wire))
                (An (car list-A))
                (Bn (car list-B))
                (Sn (car list-S)))
            (full-adder An Bn Cn Sn C))
          (let ((Ak (car list-A))
                (Bk (car list-B))
                (Sk (car list-S))
                (remain-A (cdr list-A))
                (remain-B (cdr list-B))
                (remain-S (cdr list-S))
                (Cin (make-wire)))
            (ripple-carry-adder remain-A remain-B remain-S Cin)
            (full-adder Ak Bk Cin Sk C)))
      (error "Invalid number of signals -- RIPPLE-CARRY-ADDER")))
;n位行波进位器的时延为 n*full-adder-delay
;ripple-carry-adder-delay
; = n * (2 * (and-gate-delay + 3 * inverter-delay) + or-gate-delay)
; = n * (2 * (and-gate-delay + 3 * inverter-delay) + and-gate-delay + 2 * inverter-delay)
; = n * (3 * and-gate-delay + 8 * inverter-delay)
(define (make-wire)
  (let ((signal-value 0) (action-procedures '()))
    (define (set-signal! new-value)
      (if (not (= signal-value new-value))
          (begin (set! signal-value new-value)
                 (call-each action-procedures))
          'done))
  (define (accept-action-procedure! proc)
    (set! action-procedures (cons proc action-procedures))
    (proc))
  (define (dispatch m)
    (cond ((eq? m 'get-signal) signal-value)
          ((eq? m 'set-signal!) set-signal!)
          ((eq? m 'add-action!) accept-action-procedure!)
          (else (error "Unknown operation -- WIRE" m))))
  dispatch))
(define (call-each procedures)
  (if (null? procedures)
      'done
      (begin
        ((car procedures))
        (call-each (cdr procedures)))))
(define (get-signal wire)
  (wire 'get-signal))
(define (set-signal! wire new-value)
  ((wire 'set-signal!) new-value))
(define (add-action! wire action-procedure)
  ((wire 'add-action!) action-procedure))
