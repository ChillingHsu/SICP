;ex3.3
;ex3.4
(define (make-account balance password)
  (define (withdraw amount)
    (if (<= amount balance)
        (begin (set! balance (- balance amount))
               balance)
        "insufficient funds"))
  (define (deposit amount)
    (if (> amount 0)
        (begin (set! balance (+ balance amount))
               balance)
        "insufficient funds"))
  (define (dispatch m)
    (cond ((eq? m 'withdraw) withdraw)
          ((eq? m 'deposit) deposit)
          (else (error "Unknown requests -- MAKE-ACCOUNT" m))))
  (make-authority password dispatch))

(define (make-authority password obj)
  (define wrong-try 0)
  (define max-try 7)
  (define (authorize input-password . params)
    (if (eq? input-password password)
        (begin
          (set! wrong-try 0)
          (apply obj params))
        (lambda dummy
          (set! wrong-try (+ wrong-try 1))
          (if (< wrong-try max-try)
              "Incorrect password"
              (error "Out of chance -- AUTHORIZE" wrong-try)))))
  authorize)

(define acc (make-account 100 'a-sample-password))
; ((acc 'a-sample-password 'withdraw) 70)
; ((acc 'a-bad-passwor 'withdraw) 70)
; ((acc 'a-bad-passwor 'withdraw) 70)
; ((acc 'a-bad-passwor 'withdraw) 70)
; ((acc 'a-bad-passwor 'withdraw) 70)
; ((acc 'a-bad-passwor 'withdraw) 70)
; ((acc 'a-bad-passwor 'withdraw) 70)
; ((acc 'a-bad-passwor 'withdraw) 70)
; ((acc 'a-sample-password 'deposit) 120)
; ((acc 'a-sample-passwor 'withdraw) 70)
; ((acc 'a-sample-passwor 'withdraw) 70)
;ex3.7
(define (make-joint origin-acc origin-password joint-password)
  (make-authority joint-password
             (lambda params
               (apply origin-acc (cons origin-password params)))))
(define joint-acc (make-joint acc 'a-sample-password 'joint-password))
((joint-acc 'joint-password 'withdraw) 70)
((joint-acc 'joint-password 'withdraw) 70)
((acc 'a-sample-password 'deposit) 80)
