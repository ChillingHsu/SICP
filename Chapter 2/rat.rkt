#lang sicp
;ex2.1
;有理数的表示
;cons car cdr
(define (abs a)
    (if (< a 0)
        (- a)
        a))
(define (make-rat n d)
    (let ((g (gcd n d)))
        (if (negative? (/ n d))
            (cons (- (/ (abs n) g))
                  (/ (abs d) g))
            (cons (/ (abs n) g) (/ (abs d) g)))))
(define (print-rat r)
    (display (numer r))
    (display "/")
    (display (denom r))
    (newline))
(define (numer r)
    (car r))
(define (denom r)
    (cdr r))
(define (add-rat x y)
    (make-rat (+ (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))
(define (sub-rat x y)
    (make-rat (- (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))
(define (mul-rat x y)
    (make-rat (* (numer x) (numer y))
              (* (denom x) (denom y))))
(define (div-rat x y)
    (make-rat (* (numer x) (denom y))
              (* (denom x) (numer y))))
(define (equal-rat? x y)
    (= (* (numer x) (denom y))
       (* (denom x) (numer y))))
(print-rat (sub-rat (make-rat (- 2) ( - 3)) (make-rat 1 6)))
