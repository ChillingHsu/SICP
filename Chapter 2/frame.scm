;ex2.46
(define (make-vect xcor ycor)
  (cons xcor ycor))
(define (xcor-vect vect)
  (car vect))
(define (ycor-vect vect)
  (cdr vect))
(define (add-vect vect1 vect2)
  (make-vect (+ (xcor-vect vect1) (xcor-vect vect2))
             (+ (ycor-vect vect1) (ycor-vect vect2))))
(define (sub-vect vect1 vect2)
  (make-vect (- (xcor-vect vect1) (xcor-vect vect2))
             (- (ycor-vect vect1) (ycor-vect vect2))))
(define (scale-vect s vect)
  (make-vect (* s (xcor-vect vect))
             (* s (ycor-vect vect))))
;ex2.47
;implementation 1
; (define (make-frame origin edge1 edge2)
;   (list origin edge1 edge2))
; (define (origin-frame frame)
;   (car frame))
; (define (edge1-frame frame)
;   (cadr frame))
; (define (edge2-frame frame)
;   (caddr frame))
; (define f (make-frame 1 2 3))
; (origin-frame f)
; (edge1-frame f)
; (edge2-frame f)

;implementation 2
(define (make-frame origin edge1 edge2)
  (cons origin (cons edge1 edge2)))
(define (origin-frame frame)
  (car frame))
(define (edge1-frame frame)
  (cadr frame))
(define (edge2-frame frame)
  (cddr frame))
(define f (make-frame 1 2 3))
(origin-frame f)
(edge1-frame f)
(edge2-frame f)
