#lang sicp
(define (product term a next b)
  (define (product-iter cur result)
    (if (> cur b)
        result
        (product-iter (next cur) (* result (term cur)))))
  (product-iter a 1))
(define (self x)
  x)
(define (factorial n)
  (product self 1 inc n))
(define (square x)
  (* x x))
(define (add-two a) (+ a 2))
(define (pi k)
  (* (/ 8.0 k)
     (square (/ (product self 4 add-two k)
                (product self 3 add-two k)))))
(pi 10000)
